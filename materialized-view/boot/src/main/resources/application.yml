spring:
  application:
    name: materialized-view

  # Spring Data Aerospike settings
  data:
    aerospike:
      namespace: ${embedded.aerospike.namespace:TEST}
      scans-enabled: true

  aerospike:
    hosts: ${embedded.aerospike.host:localhost}:${embedded.aerospike.port:3000}
    # Connection pooling and client tuning
    connPoolsPerNode: 4
    minConnsPerNode: 8
    maxConnsPerNode: 64
    maxSocketIdle: 600000
    timeout: 1000
    tendInterval: 500
    write:
      sendKey: true

  cache:
    type: caffeine
    cache-names:
      - productById
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=5m,recordStats

  cloud:
    function:
      definition: processProductChange

    stream:
      bindings:
        processProductChange-in-0:
          destination: product-changes
          content-type: application/*+avro
          group: materialized-view-group
          consumer:
            maxAttempts: 5
            backOffInitialInterval: 1000
            backOffMultiplier: 2.0
            backOffMaxInterval: 15000
            retryableExceptions:
              com.ai.coding.materializedview.domain.exception.InvalidMessageException: false
              com.ai.coding.materializedview.domain.exception.ExternalDependencyException: true
              com.ai.coding.materializedview.domain.exception.PersistenceException: true
        productChangesDlq-out-0:
          destination: product-changes.DLT
          content-type: application/*+avro

      kafka:
        streams:
          binder:
            configuration:
              application.id: materialized-view-app
              bootstrap.servers: localhost:9092
              default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              default.value.serde: io.confluent.kafka.streams.serdes.avro.GenericAvroSerde
              schema.registry.url: http://localhost:8081
              auto.offset.reset: earliest
              processing.guarantee: exactly_once

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    aerospike:
      enabled: false
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
        kafka.producer.record.send: true
        kafka.consumer.fetch.latency: true
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4318/v1/traces}

resilience4j:
  circuitbreaker:
    instances:
      product-commands:
        slidingWindowSize: 50
        minimumNumberOfCalls: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        recordExceptions:
          - com.ai.coding.materializedview.domain.exception.ExternalDependencyException
          - com.ai.coding.materializedview.domain.exception.PersistenceException
        ignoreExceptions:
          - com.ai.coding.materializedview.domain.exception.InvalidMessageException

logging:
  level:
    com.ai.coding.materializedview: DEBUG
    org.springframework.cloud.stream: INFO
    org.apache.kafka.streams: INFO
